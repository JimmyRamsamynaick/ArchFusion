#!/bin/bash

# ArchFusion OS - D√©tection et chargement automatique des pilotes
# Script ex√©cut√© au d√©marrage pour assurer la compatibilit√© mat√©rielle

set -euo pipefail

LOG_FILE="/var/log/archfusion-hardware-detect.log"

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

error() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1" | tee -a "$LOG_FILE" >&2
}

# D√©tection du GPU et chargement des pilotes appropri√©s
detect_gpu() {
    log "üéÆ D√©tection GPU..."
    
    # Intel
    if lspci | grep -i "intel.*graphics\|intel.*display" > /dev/null; then
        log "GPU Intel d√©tect√©"
        modprobe i915 || true
        modprobe intel_agp || true
    fi
    
    # NVIDIA
    if lspci | grep -i nvidia > /dev/null; then
        log "GPU NVIDIA d√©tect√©"
        modprobe nouveau || true
        # Note: nvidia propri√©taire n√©cessiterait une installation s√©par√©e
    fi
    
    # AMD
    if lspci | grep -i "amd\|ati\|radeon" > /dev/null; then
        log "GPU AMD/ATI d√©tect√©"
        modprobe amdgpu || true
        modprobe radeon || true
    fi
    
    # Virtualisation
    if lspci | grep -i "vmware\|virtualbox\|qemu\|bochs\|cirrus" > /dev/null; then
        log "GPU virtualis√© d√©tect√©"
        modprobe bochs_drm || true
        modprobe cirrus || true
        modprobe qxl || true
        modprobe vmwgfx || true
    fi
}

# D√©tection r√©seau
detect_network() {
    log "üåê D√©tection r√©seau..."
    
    # Ethernet communs
    for driver in e1000e r8169 igb ixgbe tg3 bnx2 sky2; do
        if lspci | grep -i ethernet > /dev/null; then
            modprobe "$driver" 2>/dev/null || true
        fi
    done
    
    # WiFi communs
    for driver in iwlwifi ath9k ath10k_pci rtl8192ce rtl8188eu; do
        if lspci | grep -i "wireless\|wifi\|802.11" > /dev/null; then
            modprobe "$driver" 2>/dev/null || true
        fi
    done
    
    # Virtualisation r√©seau
    if systemd-detect-virt > /dev/null 2>&1; then
        modprobe virtio_net || true
        modprobe vmxnet3 || true
        modprobe hv_netvsc || true
    fi
}

# D√©tection audio
detect_audio() {
    log "üîä D√©tection audio..."
    
    modprobe snd_hda_intel || true
    modprobe snd_hda_codec_realtek || true
    modprobe snd_hda_codec_hdmi || true
    modprobe snd_ac97_codec || true
    
    # Audio virtualisation
    if systemd-detect-virt > /dev/null 2>&1; then
        modprobe snd_intel8x0 || true
        modprobe snd_ens1371 || true
    fi
}

# D√©tection stockage
detect_storage() {
    log "üíæ D√©tection stockage..."
    
    # SATA/AHCI
    modprobe ahci || true
    modprobe ata_piix || true
    
    # NVMe
    modprobe nvme || true
    
    # USB Storage
    modprobe usb_storage || true
    modprobe uas || true
    
    # Virtualisation stockage
    if systemd-detect-virt > /dev/null 2>&1; then
        modprobe virtio_blk || true
        modprobe virtio_scsi || true
        modprobe hv_storvsc || true
        modprobe vmw_pvscsi || true
    fi
}

# D√©tection USB
detect_usb() {
    log "üîå D√©tection USB..."
    
    modprobe xhci_hcd || true
    modprobe ehci_hcd || true
    modprobe ohci_hcd || true
    modprobe uhci_hcd || true
}

# Configuration sp√©cifique √† la virtualisation
configure_virtualization() {
    local virt_type
    virt_type=$(systemd-detect-virt 2>/dev/null || echo "none")
    
    case "$virt_type" in
        "vmware")
            log "üñ•Ô∏è Configuration VMware"
            modprobe vmw_balloon || true
            modprobe vmw_vmci || true
            modprobe vmw_vsock_vmci_transport || true
            ;;
        "kvm"|"qemu")
            log "üñ•Ô∏è Configuration KVM/QEMU"
            modprobe virtio_balloon || true
            modprobe virtio_rng || true
            ;;
        "microsoft")
            log "üñ•Ô∏è Configuration Hyper-V"
            modprobe hv_vmbus || true
            modprobe hv_utils || true
            modprobe hv_balloon || true
            ;;
        "virtualbox")
            log "üñ•Ô∏è Configuration VirtualBox"
            modprobe vboxguest || true
            modprobe vboxsf || true
            modprobe vboxvideo || true
            ;;
        "none")
            log "üñ•Ô∏è Mat√©riel physique d√©tect√©"
            ;;
        *)
            log "üñ•Ô∏è Virtualisation inconnue: $virt_type"
            ;;
    esac
}

# Optimisations post-d√©tection
post_detection_optimizations() {
    log "‚ö° Optimisations post-d√©tection..."
    
    # Activer les services r√©seau
    systemctl enable NetworkManager.service || true
    
    # Configuration audio
    if command -v pulseaudio > /dev/null; then
        systemctl --global enable pulseaudio.service || true
    fi
    
    # Configuration graphique
    if command -v X > /dev/null; then
        # G√©n√©rer une configuration X11 basique
        mkdir -p /etc/X11/xorg.conf.d
        cat > /etc/X11/xorg.conf.d/20-archfusion-auto.conf << 'EOF'
Section "Device"
    Identifier "Auto-detected GPU"
    Driver "modesetting"
    Option "AccelMethod" "glamor"
EndSection

Section "ServerFlags"
    Option "AutoAddDevices" "true"
    Option "AutoEnableDevices" "true"
EndSection
EOF
    fi
}

# Fonction principale
main() {
    log "üöÄ D√©marrage de la d√©tection mat√©rielle ArchFusion OS"
    
    # Cr√©er le fichier de log
    mkdir -p "$(dirname "$LOG_FILE")"
    touch "$LOG_FILE"
    
    # D√©tections
    detect_gpu
    detect_network
    detect_audio
    detect_storage
    detect_usb
    configure_virtualization
    post_detection_optimizations
    
    # Informations syst√®me
    log "üìä Informations syst√®me:"
    log "Kernel: $(uname -r)"
    log "Architecture: $(uname -m)"
    log "Virtualisation: $(systemd-detect-virt 2>/dev/null || echo 'none')"
    log "Modules charg√©s: $(lsmod | wc -l)"
    
    log "‚úÖ D√©tection mat√©rielle termin√©e avec succ√®s"
}

# Ex√©cution
main "$@"
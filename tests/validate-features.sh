#!/bin/bash

# Script de validation des fonctionnalit√©s ArchFusion OS
# Teste les fonctionnalit√©s sp√©cifiques sans installation compl√®te

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ARCHISO_DIR="$PROJECT_ROOT/archiso"
FEATURES_PASSED=0
FEATURES_FAILED=0
FEATURES_WARNINGS=0

# Fonctions utilitaires
log() {
    echo -e "${BLUE}[FEATURE-TEST]${NC} $1"
}

success() {
    echo -e "${GREEN}[‚úì PASS]${NC} $1"
    ((FEATURES_PASSED++))
}

fail() {
    echo -e "${RED}[‚úó FAIL]${NC} $1"
    ((FEATURES_FAILED++))
}

warning() {
    echo -e "${YELLOW}[‚ö† WARN]${NC} $1"
    ((FEATURES_WARNINGS++))
}

info() {
    echo -e "${CYAN}[‚Ñπ INFO]${NC} $1"
}

# Test des fonctionnalit√©s ArchFusion 1.1
test_archfusion_v11_features() {
    log "üîç Test des fonctionnalit√©s ArchFusion 1.1..."
    
    # Interface utilisateur moderne
    if [ -f "$ARCHISO_DIR/airootfs/etc/skel/.config/kdeglobals" ]; then
        if grep -q "ColorScheme=BreezeDark" "$ARCHISO_DIR/airootfs/etc/skel/.config/kdeglobals"; then
            success "Interface moderne KDE configur√©e"
        else
            fail "Configuration interface KDE manquante"
        fi
    else
        fail "Fichier de configuration KDE manquant"
    fi
    
    # Optimisations syst√®me
    if [ -f "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf" ]; then
        local optimizations=("snd-hda-intel" "iwlwifi" "i915" "amdgpu")
        for opt in "${optimizations[@]}"; do
            if grep -q "$opt" "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf"; then
                success "Optimisation $opt pr√©sente"
            else
                warning "Optimisation $opt manquante"
            fi
        done
    else
        fail "Fichier d'optimisations syst√®me manquant"
    fi
    
    # Outils de productivit√©
    if [ -f "$ARCHISO_DIR/packages.x86_64" ]; then
        local productivity_tools=("firefox" "libreoffice-fresh" "gimp" "vlc")
        for tool in "${productivity_tools[@]}"; do
            if grep -q "^$tool$" "$ARCHISO_DIR/packages.x86_64"; then
                success "Outil de productivit√©: $tool"
            else
                warning "Outil de productivit√© manquant: $tool"
            fi
        done
    fi
}

# Test des fonctionnalit√©s ArchFusion 1.2
test_archfusion_v12_features() {
    log "üéÆ Test des fonctionnalit√©s ArchFusion 1.2 (Gaming)..."
    
    # Support gaming
    if [ -f "$ARCHISO_DIR/packages.x86_64" ]; then
        local gaming_packages=("steam" "lutris" "wine" "gamemode" "mangohud")
        for package in "${gaming_packages[@]}"; do
            if grep -q "^$package$" "$ARCHISO_DIR/packages.x86_64"; then
                success "Paquet gaming: $package"
            else
                warning "Paquet gaming optionnel: $package"
            fi
        done
    fi
    
    # Optimisations gaming dans modprobe
    if [ -f "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf" ]; then
        if grep -q "gamemode" "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf" || 
           grep -q "performance" "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf"; then
            success "Optimisations gaming configur√©es"
        else
            warning "Optimisations gaming non d√©tect√©es"
        fi
    fi
    
    # Pilotes graphiques
    if [ -f "$ARCHISO_DIR/packages.x86_64" ]; then
        local gpu_drivers=("mesa" "vulkan-radeon" "vulkan-intel" "nvidia-dkms")
        local drivers_found=0
        for driver in "${gpu_drivers[@]}"; do
            if grep -q "^$driver$" "$ARCHISO_DIR/packages.x86_64"; then
                success "Pilote graphique: $driver"
                ((drivers_found++))
            fi
        done
        
        if [ $drivers_found -gt 0 ]; then
            success "Support multi-GPU configur√©"
        else
            fail "Aucun pilote graphique d√©tect√©"
        fi
    fi
}

# Test des fonctionnalit√©s ArchFusion 2.0
test_archfusion_v20_features() {
    log "üöÄ Test des fonctionnalit√©s ArchFusion 2.0 (Avanc√©es)..."
    
    # Scripts d'automatisation
    local automation_scripts=(
        "$ARCHISO_DIR/airootfs/usr/local/bin/archfusion-setup.sh"
        "$ARCHISO_DIR/airootfs/usr/local/bin/welcome.sh"
        "$ARCHISO_DIR/airootfs/usr/local/bin/archfusion-help"
    )
    
    for script in "${automation_scripts[@]}"; do
        if [ -f "$script" ] && [ -x "$script" ]; then
            success "Script d'automatisation: $(basename "$script")"
        else
            fail "Script d'automatisation manquant: $(basename "$script")"
        fi
    done
    
    # Configuration r√©seau avanc√©e
    if [ -f "$ARCHISO_DIR/airootfs/etc/NetworkManager/NetworkManager.conf" ]; then
        local network_features=("dhcp=internal" "dns=systemd-resolved" "connectivity-check")
        for feature in "${network_features[@]}"; do
            if grep -q "$feature" "$ARCHISO_DIR/airootfs/etc/NetworkManager/NetworkManager.conf"; then
                success "Fonctionnalit√© r√©seau: $feature"
            else
                warning "Fonctionnalit√© r√©seau manquante: $feature"
            fi
        done
    else
        fail "Configuration NetworkManager manquante"
    fi
    
    # S√©curit√© renforc√©e
    if [ -f "$ARCHISO_DIR/airootfs/etc/ufw/ufw.conf" ]; then
        if grep -q "ENABLED=yes" "$ARCHISO_DIR/airootfs/etc/ufw/ufw.conf"; then
            success "Pare-feu UFW activ√©"
        else
            fail "Pare-feu UFW non activ√©"
        fi
    else
        fail "Configuration UFW manquante"
    fi
    
    # Shell Zsh personnalis√©
    if [ -f "$ARCHISO_DIR/airootfs/etc/skel/.zshrc" ]; then
        local zsh_features=("archfusion-update" "archfusion-clean" "archfusion-info" "archfusion-backup")
        for feature in "${zsh_features[@]}"; do
            if grep -q "$feature" "$ARCHISO_DIR/airootfs/etc/skel/.zshrc"; then
                success "Commande Zsh: $feature"
            else
                warning "Commande Zsh manquante: $feature"
            fi
        done
    else
        fail "Configuration Zsh manquante"
    fi
}

# Test de l'int√©gration des services
test_service_integration() {
    log "üîß Test de l'int√©gration des services..."
    
    # Service ArchFusion Setup
    local service_file="$ARCHISO_DIR/airootfs/etc/systemd/system/archfusion-setup.service"
    if [ -f "$service_file" ]; then
        local service_checks=("ExecStart" "WantedBy=multi-user.target" "Type=oneshot")
        for check in "${service_checks[@]}"; do
            if grep -q "$check" "$service_file"; then
                success "Configuration service: $check"
            else
                fail "Configuration service manquante: $check"
            fi
        done
    else
        fail "Fichier service ArchFusion manquant"
    fi
    
    # V√©rification des liens symboliques de services
    local service_link="$ARCHISO_DIR/airootfs/etc/systemd/system/multi-user.target.wants/archfusion-setup.service"
    if [ -L "$service_link" ] || [ -f "$service_link" ]; then
        success "Service ArchFusion activ√© au d√©marrage"
    else
        fail "Service ArchFusion non activ√©"
    fi
}

# Test des th√®mes et personnalisation
test_theming_customization() {
    log "üé® Test des th√®mes et personnalisation..."
    
    # Configuration KWin (effets et animations)
    if [ -f "$ARCHISO_DIR/airootfs/etc/skel/.config/kwinrc" ]; then
        local kwin_effects=("kwin4_effect_blur" "kwin4_effect_translucency" "slideEnabled")
        for effect in "${kwin_effects[@]}"; do
            if grep -q "$effect" "$ARCHISO_DIR/airootfs/etc/skel/.config/kwinrc"; then
                success "Effet KWin: $effect"
            else
                warning "Effet KWin manquant: $effect"
            fi
        done
    else
        fail "Configuration KWin manquante"
    fi
    
    # Configuration Plasma
    if [ -f "$ARCHISO_DIR/airootfs/etc/skel/.config/plasma-org.kde.plasma.desktop-appletsrc" ]; then
        if grep -q "org.kde.plasma.taskmanager" "$ARCHISO_DIR/airootfs/etc/skel/.config/plasma-org.kde.plasma.desktop-appletsrc"; then
            success "Configuration Plasma taskmanager"
        else
            warning "Configuration Plasma taskmanager manquante"
        fi
    else
        fail "Configuration Plasma manquante"
    fi
    
    # Configuration SDDM
    if [ -f "$ARCHISO_DIR/airootfs/etc/sddm.conf" ]; then
        if grep -q "Theme=" "$ARCHISO_DIR/airootfs/etc/sddm.conf"; then
            success "Th√®me SDDM configur√©"
        else
            warning "Th√®me SDDM non configur√©"
        fi
    else
        fail "Configuration SDDM manquante"
    fi
}

# Test de compatibilit√© mat√©rielle
test_hardware_compatibility() {
    log "üíª Test de compatibilit√© mat√©rielle..."
    
    # Pilotes r√©seau
    if [ -f "$ARCHISO_DIR/packages.x86_64" ]; then
        local network_drivers=("networkmanager" "wpa_supplicant" "dhcpcd")
        for driver in "${network_drivers[@]}"; do
            if grep -q "^$driver$" "$ARCHISO_DIR/packages.x86_64"; then
                success "Pilote r√©seau: $driver"
            else
                fail "Pilote r√©seau manquant: $driver"
            fi
        done
    fi
    
    # Support Bluetooth
    if [ -f "$ARCHISO_DIR/packages.x86_64" ]; then
        local bluetooth_packages=("bluez" "bluez-utils")
        for package in "${bluetooth_packages[@]}"; do
            if grep -q "^$package$" "$ARCHISO_DIR/packages.x86_64"; then
                success "Support Bluetooth: $package"
            else
                warning "Paquet Bluetooth manquant: $package"
            fi
        done
    fi
    
    # Support audio
    if [ -f "$ARCHISO_DIR/packages.x86_64" ]; then
        local audio_packages=("pipewire" "pipewire-pulse" "pipewire-alsa")
        for package in "${audio_packages[@]}"; do
            if grep -q "^$package$" "$ARCHISO_DIR/packages.x86_64"; then
                success "Support audio: $package"
            else
                warning "Paquet audio manquant: $package"
            fi
        done
    fi
}

# Test de performance et optimisation
test_performance_optimization() {
    log "‚ö° Test des optimisations de performance..."
    
    # Optimisations SSD
    if [ -f "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf" ]; then
        if grep -q "elevator=noop\|elevator=deadline" "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf"; then
            success "Optimisations SSD configur√©es"
        else
            warning "Optimisations SSD non d√©tect√©es"
        fi
    fi
    
    # Configuration m√©moire
    if [ -f "$ARCHISO_DIR/airootfs/etc/sysctl.d/99-archfusion.conf" ]; then
        local memory_opts=("vm.swappiness" "vm.vfs_cache_pressure" "vm.dirty_ratio")
        for opt in "${memory_opts[@]}"; do
            if grep -q "$opt" "$ARCHISO_DIR/airootfs/etc/sysctl.d/99-archfusion.conf"; then
                success "Optimisation m√©moire: $opt"
            else
                warning "Optimisation m√©moire manquante: $opt"
            fi
        done
    else
        warning "Fichier d'optimisations sysctl manquant"
    fi
}

# Test de s√©curit√©
test_security_features() {
    log "üîí Test des fonctionnalit√©s de s√©curit√©..."
    
    # Configuration UFW d√©taill√©e
    if [ -f "$ARCHISO_DIR/airootfs/etc/ufw/ufw.conf" ]; then
        local security_settings=("DEFAULT_INPUT_POLICY=\"DROP\"" "DEFAULT_OUTPUT_POLICY=\"ACCEPT\"")
        for setting in "${security_settings[@]}"; do
            if grep -q "$setting" "$ARCHISO_DIR/airootfs/etc/ufw/ufw.conf"; then
                success "Param√®tre s√©curit√© UFW: $setting"
            else
                warning "Param√®tre s√©curit√© UFW manquant: $setting"
            fi
        done
    fi
    
    # D√©sactivation des services non n√©cessaires
    if [ -f "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf" ]; then
        if grep -q "blacklist" "$ARCHISO_DIR/airootfs/etc/modprobe.d/archfusion.conf"; then
            success "Modules non s√©curis√©s d√©sactiv√©s"
        else
            warning "Aucun module blacklist√© d√©tect√©"
        fi
    fi
}

# G√©n√©ration du rapport d√©taill√©
generate_detailed_report() {
    echo ""
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                     üìä RAPPORT D√âTAILL√â DES FONCTIONNALIT√âS üìä              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
    
    # Statistiques g√©n√©rales
    echo -e "${CYAN}üìà STATISTIQUES G√âN√âRALES${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "‚úÖ Fonctionnalit√©s valid√©es: $FEATURES_PASSED"
    echo "‚ùå Fonctionnalit√©s √©chou√©es: $FEATURES_FAILED"
    echo "‚ö†Ô∏è  Avertissements: $FEATURES_WARNINGS"
    echo "üìä Total test√©: $((FEATURES_PASSED + FEATURES_FAILED + FEATURES_WARNINGS))"
    echo ""
    
    # Calcul du score de qualit√©
    local total_tests=$((FEATURES_PASSED + FEATURES_FAILED))
    local quality_score=0
    if [ $total_tests -gt 0 ]; then
        quality_score=$((FEATURES_PASSED * 100 / total_tests))
    fi
    
    echo -e "${PURPLE}üéØ SCORE DE QUALIT√â${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    if [ $quality_score -ge 90 ]; then
        echo -e "${GREEN}üèÜ Excellent: $quality_score%${NC}"
    elif [ $quality_score -ge 75 ]; then
        echo -e "${YELLOW}üëç Bon: $quality_score%${NC}"
    elif [ $quality_score -ge 50 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Moyen: $quality_score%${NC}"
    else
        echo -e "${RED}‚ùå Insuffisant: $quality_score%${NC}"
    fi
    echo ""
    
    # Recommandations
    echo -e "${BLUE}üí° RECOMMANDATIONS${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [ $FEATURES_FAILED -eq 0 ]; then
        echo "üéâ Toutes les fonctionnalit√©s critiques sont op√©rationnelles!"
        echo "‚úÖ ArchFusion OS est pr√™t pour la compilation et les tests avanc√©s"
    else
        echo "üîß $FEATURES_FAILED fonctionnalit√©(s) critique(s) n√©cessite(nt) une attention"
        echo "üìã Consultez les d√©tails ci-dessus pour les corrections n√©cessaires"
    fi
    
    if [ $FEATURES_WARNINGS -gt 0 ]; then
        echo "‚ö†Ô∏è  $FEATURES_WARNINGS avertissement(s) d√©tect√©(s) - fonctionnalit√©s optionnelles"
        echo "üí° Ces √©l√©ments peuvent am√©liorer l'exp√©rience utilisateur"
    fi
    
    echo ""
    echo "üöÄ Prochaines √©tapes recommand√©es:"
    echo "   1. Corriger les fonctionnalit√©s √©chou√©es (si applicable)"
    echo "   2. Consid√©rer l'ajout des fonctionnalit√©s optionnelles"
    echo "   3. Lancer la compilation de test avec ./build-iso.sh"
    echo "   4. Effectuer des tests en machine virtuelle"
    
    return $FEATURES_FAILED
}

# Fonction principale
main() {
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                  üß™ VALIDATION DES FONCTIONNALIT√âS ARCHFUSION üß™            ‚ïë"
    echo "‚ïë                        Tests complets sans installation                      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
    
    info "R√©pertoire de test: $PROJECT_ROOT"
    info "Configuration ArchISO: $ARCHISO_DIR"
    echo ""
    
    # Ex√©cution des tests par version
    test_archfusion_v11_features
    echo ""
    test_archfusion_v12_features
    echo ""
    test_archfusion_v20_features
    echo ""
    
    # Tests d'int√©gration
    test_service_integration
    echo ""
    test_theming_customization
    echo ""
    test_hardware_compatibility
    echo ""
    test_performance_optimization
    echo ""
    test_security_features
    echo ""
    
    # G√©n√©ration du rapport final
    generate_detailed_report
}

# Point d'entr√©e
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi